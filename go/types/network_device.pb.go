// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.21.12
// source: network_device.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Status of a tree node
type TreeNodeStatus int32

const (
	TreeNodeStatus_UNKNOWN     TreeNodeStatus = 0
	TreeNodeStatus_ACTIVE      TreeNodeStatus = 1
	TreeNodeStatus_INACTIVE    TreeNodeStatus = 2
	TreeNodeStatus_DEGRADED    TreeNodeStatus = 3
	TreeNodeStatus_FAILED      TreeNodeStatus = 4
	TreeNodeStatus_MAINTENANCE TreeNodeStatus = 5
)

// Enum value maps for TreeNodeStatus.
var (
	TreeNodeStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "ACTIVE",
		2: "INACTIVE",
		3: "DEGRADED",
		4: "FAILED",
		5: "MAINTENANCE",
	}
	TreeNodeStatus_value = map[string]int32{
		"UNKNOWN":     0,
		"ACTIVE":      1,
		"INACTIVE":    2,
		"DEGRADED":    3,
		"FAILED":      4,
		"MAINTENANCE": 5,
	}
)

func (x TreeNodeStatus) Enum() *TreeNodeStatus {
	p := new(TreeNodeStatus)
	*p = x
	return p
}

func (x TreeNodeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TreeNodeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_network_device_proto_enumTypes[0].Descriptor()
}

func (TreeNodeStatus) Type() protoreflect.EnumType {
	return &file_network_device_proto_enumTypes[0]
}

func (x TreeNodeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TreeNodeStatus.Descriptor instead.
func (TreeNodeStatus) EnumDescriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{0}
}

type ChassisType int32

const (
	ChassisType_MAIN_CHASSIS      ChassisType = 0
	ChassisType_LINE_CARD_CHASSIS ChassisType = 1
	ChassisType_FABRIC_CHASSIS    ChassisType = 2
	ChassisType_CONTROL_CHASSIS   ChassisType = 3
	ChassisType_SWITCH_CHASSIS    ChassisType = 4
	ChassisType_ROUTER_CHASSIS    ChassisType = 5
)

// Enum value maps for ChassisType.
var (
	ChassisType_name = map[int32]string{
		0: "MAIN_CHASSIS",
		1: "LINE_CARD_CHASSIS",
		2: "FABRIC_CHASSIS",
		3: "CONTROL_CHASSIS",
		4: "SWITCH_CHASSIS",
		5: "ROUTER_CHASSIS",
	}
	ChassisType_value = map[string]int32{
		"MAIN_CHASSIS":      0,
		"LINE_CARD_CHASSIS": 1,
		"FABRIC_CHASSIS":    2,
		"CONTROL_CHASSIS":   3,
		"SWITCH_CHASSIS":    4,
		"ROUTER_CHASSIS":    5,
	}
)

func (x ChassisType) Enum() *ChassisType {
	p := new(ChassisType)
	*p = x
	return p
}

func (x ChassisType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChassisType) Descriptor() protoreflect.EnumDescriptor {
	return file_network_device_proto_enumTypes[1].Descriptor()
}

func (ChassisType) Type() protoreflect.EnumType {
	return &file_network_device_proto_enumTypes[1]
}

func (x ChassisType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChassisType.Descriptor instead.
func (ChassisType) EnumDescriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{1}
}

type SlotType int32

const (
	SlotType_LINE_CARD    SlotType = 0
	SlotType_SUPERVISOR   SlotType = 1
	SlotType_FABRIC       SlotType = 2
	SlotType_POWER_SUPPLY SlotType = 3
	SlotType_FAN_TRAY     SlotType = 4
	SlotType_EXPANSION    SlotType = 5
)

// Enum value maps for SlotType.
var (
	SlotType_name = map[int32]string{
		0: "LINE_CARD",
		1: "SUPERVISOR",
		2: "FABRIC",
		3: "POWER_SUPPLY",
		4: "FAN_TRAY",
		5: "EXPANSION",
	}
	SlotType_value = map[string]int32{
		"LINE_CARD":    0,
		"SUPERVISOR":   1,
		"FABRIC":       2,
		"POWER_SUPPLY": 3,
		"FAN_TRAY":     4,
		"EXPANSION":    5,
	}
)

func (x SlotType) Enum() *SlotType {
	p := new(SlotType)
	*p = x
	return p
}

func (x SlotType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SlotType) Descriptor() protoreflect.EnumDescriptor {
	return file_network_device_proto_enumTypes[2].Descriptor()
}

func (SlotType) Type() protoreflect.EnumType {
	return &file_network_device_proto_enumTypes[2]
}

func (x SlotType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SlotType.Descriptor instead.
func (SlotType) EnumDescriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{2}
}

type CardType int32

const (
	CardType_LINE_CARD_TYPE  CardType = 0
	CardType_SUPERVISOR_CARD CardType = 1
	CardType_FABRIC_CARD     CardType = 2
	CardType_SERVICE_CARD    CardType = 3
	CardType_INTERFACE_CARD  CardType = 4
)

// Enum value maps for CardType.
var (
	CardType_name = map[int32]string{
		0: "LINE_CARD_TYPE",
		1: "SUPERVISOR_CARD",
		2: "FABRIC_CARD",
		3: "SERVICE_CARD",
		4: "INTERFACE_CARD",
	}
	CardType_value = map[string]int32{
		"LINE_CARD_TYPE":  0,
		"SUPERVISOR_CARD": 1,
		"FABRIC_CARD":     2,
		"SERVICE_CARD":    3,
		"INTERFACE_CARD":  4,
	}
)

func (x CardType) Enum() *CardType {
	p := new(CardType)
	*p = x
	return p
}

func (x CardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardType) Descriptor() protoreflect.EnumDescriptor {
	return file_network_device_proto_enumTypes[3].Descriptor()
}

func (CardType) Type() protoreflect.EnumType {
	return &file_network_device_proto_enumTypes[3]
}

func (x CardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardType.Descriptor instead.
func (CardType) EnumDescriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{3}
}

type PortType int32

const (
	PortType_ETHERNET PortType = 0
	PortType_FIBER    PortType = 1
	PortType_SERIAL   PortType = 2
	PortType_ATM      PortType = 3
	PortType_SONET    PortType = 4
	PortType_POS      PortType = 5
	PortType_WIRELESS PortType = 6
	PortType_VIRTUAL  PortType = 7
)

// Enum value maps for PortType.
var (
	PortType_name = map[int32]string{
		0: "ETHERNET",
		1: "FIBER",
		2: "SERIAL",
		3: "ATM",
		4: "SONET",
		5: "POS",
		6: "WIRELESS",
		7: "VIRTUAL",
	}
	PortType_value = map[string]int32{
		"ETHERNET": 0,
		"FIBER":    1,
		"SERIAL":   2,
		"ATM":      3,
		"SONET":    4,
		"POS":      5,
		"WIRELESS": 6,
		"VIRTUAL":  7,
	}
)

func (x PortType) Enum() *PortType {
	p := new(PortType)
	*p = x
	return p
}

func (x PortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortType) Descriptor() protoreflect.EnumDescriptor {
	return file_network_device_proto_enumTypes[4].Descriptor()
}

func (PortType) Type() protoreflect.EnumType {
	return &file_network_device_proto_enumTypes[4]
}

func (x PortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortType.Descriptor instead.
func (PortType) EnumDescriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{4}
}

type PortSpeed int32

const (
	PortSpeed_SPEED_10M  PortSpeed = 0
	PortSpeed_SPEED_100M PortSpeed = 1
	PortSpeed_SPEED_1G   PortSpeed = 2
	PortSpeed_SPEED_10G  PortSpeed = 3
	PortSpeed_SPEED_25G  PortSpeed = 4
	PortSpeed_SPEED_40G  PortSpeed = 5
	PortSpeed_SPEED_50G  PortSpeed = 6
	PortSpeed_SPEED_100G PortSpeed = 7
	PortSpeed_SPEED_200G PortSpeed = 8
	PortSpeed_SPEED_400G PortSpeed = 9
)

// Enum value maps for PortSpeed.
var (
	PortSpeed_name = map[int32]string{
		0: "SPEED_10M",
		1: "SPEED_100M",
		2: "SPEED_1G",
		3: "SPEED_10G",
		4: "SPEED_25G",
		5: "SPEED_40G",
		6: "SPEED_50G",
		7: "SPEED_100G",
		8: "SPEED_200G",
		9: "SPEED_400G",
	}
	PortSpeed_value = map[string]int32{
		"SPEED_10M":  0,
		"SPEED_100M": 1,
		"SPEED_1G":   2,
		"SPEED_10G":  3,
		"SPEED_25G":  4,
		"SPEED_40G":  5,
		"SPEED_50G":  6,
		"SPEED_100G": 7,
		"SPEED_200G": 8,
		"SPEED_400G": 9,
	}
)

func (x PortSpeed) Enum() *PortSpeed {
	p := new(PortSpeed)
	*p = x
	return p
}

func (x PortSpeed) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortSpeed) Descriptor() protoreflect.EnumDescriptor {
	return file_network_device_proto_enumTypes[5].Descriptor()
}

func (PortSpeed) Type() protoreflect.EnumType {
	return &file_network_device_proto_enumTypes[5]
}

func (x PortSpeed) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortSpeed.Descriptor instead.
func (PortSpeed) EnumDescriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{5}
}

type PortDuplex int32

const (
	PortDuplex_HALF_DUPLEX PortDuplex = 0
	PortDuplex_FULL_DUPLEX PortDuplex = 1
	PortDuplex_AUTO        PortDuplex = 2
)

// Enum value maps for PortDuplex.
var (
	PortDuplex_name = map[int32]string{
		0: "HALF_DUPLEX",
		1: "FULL_DUPLEX",
		2: "AUTO",
	}
	PortDuplex_value = map[string]int32{
		"HALF_DUPLEX": 0,
		"FULL_DUPLEX": 1,
		"AUTO":        2,
	}
)

func (x PortDuplex) Enum() *PortDuplex {
	p := new(PortDuplex)
	*p = x
	return p
}

func (x PortDuplex) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortDuplex) Descriptor() protoreflect.EnumDescriptor {
	return file_network_device_proto_enumTypes[6].Descriptor()
}

func (PortDuplex) Type() protoreflect.EnumType {
	return &file_network_device_proto_enumTypes[6]
}

func (x PortDuplex) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortDuplex.Descriptor instead.
func (PortDuplex) EnumDescriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{6}
}

type TransceiverType int32

const (
	TransceiverType_SFP       TransceiverType = 0
	TransceiverType_SFP_PLUS  TransceiverType = 1
	TransceiverType_QSFP      TransceiverType = 2
	TransceiverType_QSFP_PLUS TransceiverType = 3
	TransceiverType_QSFP28    TransceiverType = 4
	TransceiverType_XFP       TransceiverType = 5
	TransceiverType_CFP       TransceiverType = 6
	TransceiverType_GBIC      TransceiverType = 7
)

// Enum value maps for TransceiverType.
var (
	TransceiverType_name = map[int32]string{
		0: "SFP",
		1: "SFP_PLUS",
		2: "QSFP",
		3: "QSFP_PLUS",
		4: "QSFP28",
		5: "XFP",
		6: "CFP",
		7: "GBIC",
	}
	TransceiverType_value = map[string]int32{
		"SFP":       0,
		"SFP_PLUS":  1,
		"QSFP":      2,
		"QSFP_PLUS": 3,
		"QSFP28":    4,
		"XFP":       5,
		"CFP":       6,
		"GBIC":      7,
	}
)

func (x TransceiverType) Enum() *TransceiverType {
	p := new(TransceiverType)
	*p = x
	return p
}

func (x TransceiverType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransceiverType) Descriptor() protoreflect.EnumDescriptor {
	return file_network_device_proto_enumTypes[7].Descriptor()
}

func (TransceiverType) Type() protoreflect.EnumType {
	return &file_network_device_proto_enumTypes[7]
}

func (x TransceiverType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransceiverType.Descriptor instead.
func (TransceiverType) EnumDescriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{7}
}

type SensorType int32

const (
	SensorType_TEMPERATURE SensorType = 0
	SensorType_VOLTAGE     SensorType = 1
	SensorType_CURRENT     SensorType = 2
	SensorType_POWER       SensorType = 3
	SensorType_HUMIDITY    SensorType = 4
)

// Enum value maps for SensorType.
var (
	SensorType_name = map[int32]string{
		0: "TEMPERATURE",
		1: "VOLTAGE",
		2: "CURRENT",
		3: "POWER",
		4: "HUMIDITY",
	}
	SensorType_value = map[string]int32{
		"TEMPERATURE": 0,
		"VOLTAGE":     1,
		"CURRENT":     2,
		"POWER":       3,
		"HUMIDITY":    4,
	}
)

func (x SensorType) Enum() *SensorType {
	p := new(SensorType)
	*p = x
	return p
}

func (x SensorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SensorType) Descriptor() protoreflect.EnumDescriptor {
	return file_network_device_proto_enumTypes[8].Descriptor()
}

func (SensorType) Type() protoreflect.EnumType {
	return &file_network_device_proto_enumTypes[8]
}

func (x SensorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SensorType.Descriptor instead.
func (SensorType) EnumDescriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{8}
}

type InterfaceType int32

const (
	InterfaceType_PHYSICAL_INTERFACE InterfaceType = 0
	InterfaceType_SUBINTERFACE       InterfaceType = 1
	InterfaceType_VLAN_INTERFACE     InterfaceType = 2
	InterfaceType_LOOPBACK           InterfaceType = 3
	InterfaceType_TUNNEL_INTERFACE   InterfaceType = 4
	InterfaceType_BRIDGE_INTERFACE   InterfaceType = 5
	InterfaceType_LAG_INTERFACE      InterfaceType = 6
	InterfaceType_VIRTUAL_INTERFACE  InterfaceType = 7
)

// Enum value maps for InterfaceType.
var (
	InterfaceType_name = map[int32]string{
		0: "PHYSICAL_INTERFACE",
		1: "SUBINTERFACE",
		2: "VLAN_INTERFACE",
		3: "LOOPBACK",
		4: "TUNNEL_INTERFACE",
		5: "BRIDGE_INTERFACE",
		6: "LAG_INTERFACE",
		7: "VIRTUAL_INTERFACE",
	}
	InterfaceType_value = map[string]int32{
		"PHYSICAL_INTERFACE": 0,
		"SUBINTERFACE":       1,
		"VLAN_INTERFACE":     2,
		"LOOPBACK":           3,
		"TUNNEL_INTERFACE":   4,
		"BRIDGE_INTERFACE":   5,
		"LAG_INTERFACE":      6,
		"VIRTUAL_INTERFACE":  7,
	}
)

func (x InterfaceType) Enum() *InterfaceType {
	p := new(InterfaceType)
	*p = x
	return p
}

func (x InterfaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterfaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_network_device_proto_enumTypes[9].Descriptor()
}

func (InterfaceType) Type() protoreflect.EnumType {
	return &file_network_device_proto_enumTypes[9]
}

func (x InterfaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterfaceType.Descriptor instead.
func (InterfaceType) EnumDescriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{9}
}

type TunnelType int32

const (
	TunnelType_GRE   TunnelType = 0
	TunnelType_IPSEC TunnelType = 1
	TunnelType_L2TP  TunnelType = 2
	TunnelType_VXLAN TunnelType = 3
	TunnelType_MPLS  TunnelType = 4
)

// Enum value maps for TunnelType.
var (
	TunnelType_name = map[int32]string{
		0: "GRE",
		1: "IPSEC",
		2: "L2TP",
		3: "VXLAN",
		4: "MPLS",
	}
	TunnelType_value = map[string]int32{
		"GRE":   0,
		"IPSEC": 1,
		"L2TP":  2,
		"VXLAN": 3,
		"MPLS":  4,
	}
)

func (x TunnelType) Enum() *TunnelType {
	p := new(TunnelType)
	*p = x
	return p
}

func (x TunnelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TunnelType) Descriptor() protoreflect.EnumDescriptor {
	return file_network_device_proto_enumTypes[10].Descriptor()
}

func (TunnelType) Type() protoreflect.EnumType {
	return &file_network_device_proto_enumTypes[10]
}

func (x TunnelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TunnelType.Descriptor instead.
func (TunnelType) EnumDescriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{10}
}

type RoutingProtocolType int32

const (
	RoutingProtocolType_STATIC RoutingProtocolType = 0
	RoutingProtocolType_RIP    RoutingProtocolType = 1
	RoutingProtocolType_OSPF   RoutingProtocolType = 2
	RoutingProtocolType_EIGRP  RoutingProtocolType = 3
	RoutingProtocolType_BGP    RoutingProtocolType = 4
	RoutingProtocolType_ISIS   RoutingProtocolType = 5
)

// Enum value maps for RoutingProtocolType.
var (
	RoutingProtocolType_name = map[int32]string{
		0: "STATIC",
		1: "RIP",
		2: "OSPF",
		3: "EIGRP",
		4: "BGP",
		5: "ISIS",
	}
	RoutingProtocolType_value = map[string]int32{
		"STATIC": 0,
		"RIP":    1,
		"OSPF":   2,
		"EIGRP":  3,
		"BGP":    4,
		"ISIS":   5,
	}
)

func (x RoutingProtocolType) Enum() *RoutingProtocolType {
	p := new(RoutingProtocolType)
	*p = x
	return p
}

func (x RoutingProtocolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoutingProtocolType) Descriptor() protoreflect.EnumDescriptor {
	return file_network_device_proto_enumTypes[11].Descriptor()
}

func (RoutingProtocolType) Type() protoreflect.EnumType {
	return &file_network_device_proto_enumTypes[11]
}

func (x RoutingProtocolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoutingProtocolType.Descriptor instead.
func (RoutingProtocolType) EnumDescriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{11}
}

type SwitchingProtocolType int32

const (
	SwitchingProtocolType_STP  SwitchingProtocolType = 0
	SwitchingProtocolType_RSTP SwitchingProtocolType = 1
	SwitchingProtocolType_MSTP SwitchingProtocolType = 2
	SwitchingProtocolType_PVST SwitchingProtocolType = 3
	SwitchingProtocolType_LACP SwitchingProtocolType = 4
)

// Enum value maps for SwitchingProtocolType.
var (
	SwitchingProtocolType_name = map[int32]string{
		0: "STP",
		1: "RSTP",
		2: "MSTP",
		3: "PVST",
		4: "LACP",
	}
	SwitchingProtocolType_value = map[string]int32{
		"STP":  0,
		"RSTP": 1,
		"MSTP": 2,
		"PVST": 3,
		"LACP": 4,
	}
)

func (x SwitchingProtocolType) Enum() *SwitchingProtocolType {
	p := new(SwitchingProtocolType)
	*p = x
	return p
}

func (x SwitchingProtocolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SwitchingProtocolType) Descriptor() protoreflect.EnumDescriptor {
	return file_network_device_proto_enumTypes[12].Descriptor()
}

func (SwitchingProtocolType) Type() protoreflect.EnumType {
	return &file_network_device_proto_enumTypes[12]
}

func (x SwitchingProtocolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SwitchingProtocolType.Descriptor instead.
func (SwitchingProtocolType) EnumDescriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{12}
}

type SecurityProtocolType int32

const (
	SecurityProtocolType_ACL      SecurityProtocolType = 0
	SecurityProtocolType_FIREWALL SecurityProtocolType = 1
	SecurityProtocolType_VPN      SecurityProtocolType = 2
	SecurityProtocolType_NAT      SecurityProtocolType = 3
	SecurityProtocolType_AAA      SecurityProtocolType = 4
)

// Enum value maps for SecurityProtocolType.
var (
	SecurityProtocolType_name = map[int32]string{
		0: "ACL",
		1: "FIREWALL",
		2: "VPN",
		3: "NAT",
		4: "AAA",
	}
	SecurityProtocolType_value = map[string]int32{
		"ACL":      0,
		"FIREWALL": 1,
		"VPN":      2,
		"NAT":      3,
		"AAA":      4,
	}
)

func (x SecurityProtocolType) Enum() *SecurityProtocolType {
	p := new(SecurityProtocolType)
	*p = x
	return p
}

func (x SecurityProtocolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecurityProtocolType) Descriptor() protoreflect.EnumDescriptor {
	return file_network_device_proto_enumTypes[13].Descriptor()
}

func (SecurityProtocolType) Type() protoreflect.EnumType {
	return &file_network_device_proto_enumTypes[13]
}

func (x SecurityProtocolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecurityProtocolType.Descriptor instead.
func (SecurityProtocolType) EnumDescriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{13}
}

type QoSProtocolType int32

const (
	QoSProtocolType_DIFFSERV         QoSProtocolType = 0
	QoSProtocolType_INTSERV          QoSProtocolType = 1
	QoSProtocolType_TRAFFIC_SHAPING  QoSProtocolType = 2
	QoSProtocolType_POLICER          QoSProtocolType = 3
	QoSProtocolType_QUEUE_MANAGEMENT QoSProtocolType = 4
)

// Enum value maps for QoSProtocolType.
var (
	QoSProtocolType_name = map[int32]string{
		0: "DIFFSERV",
		1: "INTSERV",
		2: "TRAFFIC_SHAPING",
		3: "POLICER",
		4: "QUEUE_MANAGEMENT",
	}
	QoSProtocolType_value = map[string]int32{
		"DIFFSERV":         0,
		"INTSERV":          1,
		"TRAFFIC_SHAPING":  2,
		"POLICER":          3,
		"QUEUE_MANAGEMENT": 4,
	}
)

func (x QoSProtocolType) Enum() *QoSProtocolType {
	p := new(QoSProtocolType)
	*p = x
	return p
}

func (x QoSProtocolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QoSProtocolType) Descriptor() protoreflect.EnumDescriptor {
	return file_network_device_proto_enumTypes[14].Descriptor()
}

func (QoSProtocolType) Type() protoreflect.EnumType {
	return &file_network_device_proto_enumTypes[14]
}

func (x QoSProtocolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QoSProtocolType.Descriptor instead.
func (QoSProtocolType) EnumDescriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{14}
}

type ManagementProtocolType int32

const (
	ManagementProtocolType_SNMP     ManagementProtocolType = 0
	ManagementProtocolType_SSH      ManagementProtocolType = 1
	ManagementProtocolType_TELNET   ManagementProtocolType = 2
	ManagementProtocolType_HTTP     ManagementProtocolType = 3
	ManagementProtocolType_HTTPS    ManagementProtocolType = 4
	ManagementProtocolType_NETCONF  ManagementProtocolType = 5
	ManagementProtocolType_RESTCONF ManagementProtocolType = 6
)

// Enum value maps for ManagementProtocolType.
var (
	ManagementProtocolType_name = map[int32]string{
		0: "SNMP",
		1: "SSH",
		2: "TELNET",
		3: "HTTP",
		4: "HTTPS",
		5: "NETCONF",
		6: "RESTCONF",
	}
	ManagementProtocolType_value = map[string]int32{
		"SNMP":     0,
		"SSH":      1,
		"TELNET":   2,
		"HTTP":     3,
		"HTTPS":    4,
		"NETCONF":  5,
		"RESTCONF": 6,
	}
)

func (x ManagementProtocolType) Enum() *ManagementProtocolType {
	p := new(ManagementProtocolType)
	*p = x
	return p
}

func (x ManagementProtocolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ManagementProtocolType) Descriptor() protoreflect.EnumDescriptor {
	return file_network_device_proto_enumTypes[15].Descriptor()
}

func (ManagementProtocolType) Type() protoreflect.EnumType {
	return &file_network_device_proto_enumTypes[15]
}

func (x ManagementProtocolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ManagementProtocolType.Descriptor instead.
func (ManagementProtocolType) EnumDescriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{15}
}

type RelationshipType int32

const (
	RelationshipType_CONTAINS       RelationshipType = 0
	RelationshipType_CONNECTED_TO   RelationshipType = 1
	RelationshipType_DEPENDS_ON     RelationshipType = 2
	RelationshipType_CONFIGURED_ON  RelationshipType = 3
	RelationshipType_ROUTES_THROUGH RelationshipType = 4
	RelationshipType_BRIDGES_TO     RelationshipType = 5
	RelationshipType_TUNNELS_TO     RelationshipType = 6
)

// Enum value maps for RelationshipType.
var (
	RelationshipType_name = map[int32]string{
		0: "CONTAINS",
		1: "CONNECTED_TO",
		2: "DEPENDS_ON",
		3: "CONFIGURED_ON",
		4: "ROUTES_THROUGH",
		5: "BRIDGES_TO",
		6: "TUNNELS_TO",
	}
	RelationshipType_value = map[string]int32{
		"CONTAINS":       0,
		"CONNECTED_TO":   1,
		"DEPENDS_ON":     2,
		"CONFIGURED_ON":  3,
		"ROUTES_THROUGH": 4,
		"BRIDGES_TO":     5,
		"TUNNELS_TO":     6,
	}
)

func (x RelationshipType) Enum() *RelationshipType {
	p := new(RelationshipType)
	*p = x
	return p
}

func (x RelationshipType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelationshipType) Descriptor() protoreflect.EnumDescriptor {
	return file_network_device_proto_enumTypes[16].Descriptor()
}

func (RelationshipType) Type() protoreflect.EnumType {
	return &file_network_device_proto_enumTypes[16]
}

func (x RelationshipType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelationshipType.Descriptor instead.
func (RelationshipType) EnumDescriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{16}
}

// Abstract tree node representing any network device component
type TreeNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type       string            `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Status     TreeNodeStatus    `protobuf:"varint,4,opt,name=status,proto3,enum=types.TreeNodeStatus" json:"status,omitempty"`
	Attributes map[string]string `protobuf:"bytes,5,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Children   []*TreeNode       `protobuf:"bytes,6,rep,name=children,proto3" json:"children,omitempty"`
	Parent     *TreeNode         `protobuf:"bytes,7,opt,name=parent,proto3" json:"parent,omitempty"`
	Depth      int32             `protobuf:"varint,8,opt,name=depth,proto3" json:"depth,omitempty"`
	Path       string            `protobuf:"bytes,9,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *TreeNode) Reset() {
	*x = TreeNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_device_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeNode) ProtoMessage() {}

func (x *TreeNode) ProtoReflect() protoreflect.Message {
	mi := &file_network_device_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeNode.ProtoReflect.Descriptor instead.
func (*TreeNode) Descriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{0}
}

func (x *TreeNode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TreeNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TreeNode) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TreeNode) GetStatus() TreeNodeStatus {
	if x != nil {
		return x.Status
	}
	return TreeNodeStatus_UNKNOWN
}

func (x *TreeNode) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *TreeNode) GetChildren() []*TreeNode {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *TreeNode) GetParent() *TreeNode {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *TreeNode) GetDepth() int32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *TreeNode) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// Network Device List
type NetworkDeviceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*NetworkDevice `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *NetworkDeviceList) Reset() {
	*x = NetworkDeviceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_device_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkDeviceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkDeviceList) ProtoMessage() {}

func (x *NetworkDeviceList) ProtoReflect() protoreflect.Message {
	mi := &file_network_device_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkDeviceList.ProtoReflect.Descriptor instead.
func (*NetworkDeviceList) Descriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{1}
}

func (x *NetworkDeviceList) GetList() []*NetworkDevice {
	if x != nil {
		return x.List
	}
	return nil
}

// Root network device containing all layers
type NetworkDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	EquipmentInfo   *EquipmentInfo   `protobuf:"bytes,3,opt,name=equipment_info,json=equipmentInfo,proto3" json:"equipment_info,omitempty"`
	PhysicalLayer   *PhysicalLayer   `protobuf:"bytes,4,opt,name=physical_layer,json=physicalLayer,proto3" json:"physical_layer,omitempty"`
	LogicalLayer    *LogicalLayer    `protobuf:"bytes,5,opt,name=logical_layer,json=logicalLayer,proto3" json:"logical_layer,omitempty"`
	TechnologyLayer *TechnologyLayer `protobuf:"bytes,6,opt,name=technology_layer,json=technologyLayer,proto3" json:"technology_layer,omitempty"`
	DeviceTree      *TreeNode        `protobuf:"bytes,7,opt,name=device_tree,json=deviceTree,proto3" json:"device_tree,omitempty"`
	Relationships   []*Relationship  `protobuf:"bytes,8,rep,name=relationships,proto3" json:"relationships,omitempty"`
}

func (x *NetworkDevice) Reset() {
	*x = NetworkDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_device_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkDevice) ProtoMessage() {}

func (x *NetworkDevice) ProtoReflect() protoreflect.Message {
	mi := &file_network_device_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkDevice.ProtoReflect.Descriptor instead.
func (*NetworkDevice) Descriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{2}
}

func (x *NetworkDevice) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NetworkDevice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkDevice) GetEquipmentInfo() *EquipmentInfo {
	if x != nil {
		return x.EquipmentInfo
	}
	return nil
}

func (x *NetworkDevice) GetPhysicalLayer() *PhysicalLayer {
	if x != nil {
		return x.PhysicalLayer
	}
	return nil
}

func (x *NetworkDevice) GetLogicalLayer() *LogicalLayer {
	if x != nil {
		return x.LogicalLayer
	}
	return nil
}

func (x *NetworkDevice) GetTechnologyLayer() *TechnologyLayer {
	if x != nil {
		return x.TechnologyLayer
	}
	return nil
}

func (x *NetworkDevice) GetDeviceTree() *TreeNode {
	if x != nil {
		return x.DeviceTree
	}
	return nil
}

func (x *NetworkDevice) GetRelationships() []*Relationship {
	if x != nil {
		return x.Relationships
	}
	return nil
}

// Location information
type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Latitude  float64 `protobuf:"fixed64,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_device_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_network_device_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{3}
}

func (x *Location) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Location) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Location) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

// Equipment identification and metadata
type EquipmentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor          string    `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Model           string    `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	Series          string    `protobuf:"bytes,3,opt,name=series,proto3" json:"series,omitempty"`
	Family          string    `protobuf:"bytes,4,opt,name=family,proto3" json:"family,omitempty"`
	SoftwareVersion string    `protobuf:"bytes,5,opt,name=software_version,json=softwareVersion,proto3" json:"software_version,omitempty"`
	HardwareVersion string    `protobuf:"bytes,6,opt,name=hardware_version,json=hardwareVersion,proto3" json:"hardware_version,omitempty"`
	FirmwareVersion string    `protobuf:"bytes,7,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	SystemName      string    `protobuf:"bytes,8,opt,name=system_name,json=systemName,proto3" json:"system_name,omitempty"`
	SystemOid       string    `protobuf:"bytes,9,opt,name=system_oid,json=systemOid,proto3" json:"system_oid,omitempty"`
	SerialNumber    string    `protobuf:"bytes,10,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	MacAddress      string    `protobuf:"bytes,11,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	IpAddresses     []string  `protobuf:"bytes,12,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
	Location        *Location `protobuf:"bytes,13,opt,name=location,proto3" json:"location,omitempty"`
	Uptime          int64     `protobuf:"varint,14,opt,name=uptime,proto3" json:"uptime,omitempty"`
}

func (x *EquipmentInfo) Reset() {
	*x = EquipmentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_device_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipmentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentInfo) ProtoMessage() {}

func (x *EquipmentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_network_device_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentInfo.ProtoReflect.Descriptor instead.
func (*EquipmentInfo) Descriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{4}
}

func (x *EquipmentInfo) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *EquipmentInfo) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *EquipmentInfo) GetSeries() string {
	if x != nil {
		return x.Series
	}
	return ""
}

func (x *EquipmentInfo) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *EquipmentInfo) GetSoftwareVersion() string {
	if x != nil {
		return x.SoftwareVersion
	}
	return ""
}

func (x *EquipmentInfo) GetHardwareVersion() string {
	if x != nil {
		return x.HardwareVersion
	}
	return ""
}

func (x *EquipmentInfo) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *EquipmentInfo) GetSystemName() string {
	if x != nil {
		return x.SystemName
	}
	return ""
}

func (x *EquipmentInfo) GetSystemOid() string {
	if x != nil {
		return x.SystemOid
	}
	return ""
}

func (x *EquipmentInfo) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *EquipmentInfo) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *EquipmentInfo) GetIpAddresses() []string {
	if x != nil {
		return x.IpAddresses
	}
	return nil
}

func (x *EquipmentInfo) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *EquipmentInfo) GetUptime() int64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

// Physical layer representation
type PhysicalLayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root            *TreeNode      `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	ChassisList     []*Chassis     `protobuf:"bytes,2,rep,name=chassis_list,json=chassisList,proto3" json:"chassis_list,omitempty"`
	CardList        []*Card        `protobuf:"bytes,3,rep,name=card_list,json=cardList,proto3" json:"card_list,omitempty"`
	PortList        []*Port        `protobuf:"bytes,4,rep,name=port_list,json=portList,proto3" json:"port_list,omitempty"`
	TransceiverList []*Transceiver `protobuf:"bytes,5,rep,name=transceiver_list,json=transceiverList,proto3" json:"transceiver_list,omitempty"`
}

func (x *PhysicalLayer) Reset() {
	*x = PhysicalLayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_device_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhysicalLayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhysicalLayer) ProtoMessage() {}

func (x *PhysicalLayer) ProtoReflect() protoreflect.Message {
	mi := &file_network_device_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhysicalLayer.ProtoReflect.Descriptor instead.
func (*PhysicalLayer) Descriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{5}
}

func (x *PhysicalLayer) GetRoot() *TreeNode {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *PhysicalLayer) GetChassisList() []*Chassis {
	if x != nil {
		return x.ChassisList
	}
	return nil
}

func (x *PhysicalLayer) GetCardList() []*Card {
	if x != nil {
		return x.CardList
	}
	return nil
}

func (x *PhysicalLayer) GetPortList() []*Port {
	if x != nil {
		return x.PortList
	}
	return nil
}

func (x *PhysicalLayer) GetTransceiverList() []*Transceiver {
	if x != nil {
		return x.TransceiverList
	}
	return nil
}

// Physical chassis/enclosure
type Chassis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SerialNumber  string         `protobuf:"bytes,3,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	PartNumber    string         `protobuf:"bytes,4,opt,name=part_number,json=partNumber,proto3" json:"part_number,omitempty"`
	ChassisType   ChassisType    `protobuf:"varint,5,opt,name=chassis_type,json=chassisType,proto3,enum=types.ChassisType" json:"chassis_type,omitempty"`
	Slots         []*Slot        `protobuf:"bytes,6,rep,name=slots,proto3" json:"slots,omitempty"`
	PowerSupplies []*PowerSupply `protobuf:"bytes,7,rep,name=power_supplies,json=powerSupplies,proto3" json:"power_supplies,omitempty"`
	Fans          []*Fan         `protobuf:"bytes,8,rep,name=fans,proto3" json:"fans,omitempty"`
	Sensors       []*Sensor      `protobuf:"bytes,9,rep,name=sensors,proto3" json:"sensors,omitempty"`
	Status        TreeNodeStatus `protobuf:"varint,10,opt,name=status,proto3,enum=types.TreeNodeStatus" json:"status,omitempty"`
}

func (x *Chassis) Reset() {
	*x = Chassis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_device_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chassis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chassis) ProtoMessage() {}

func (x *Chassis) ProtoReflect() protoreflect.Message {
	mi := &file_network_device_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chassis.ProtoReflect.Descriptor instead.
func (*Chassis) Descriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{6}
}

func (x *Chassis) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Chassis) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Chassis) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *Chassis) GetPartNumber() string {
	if x != nil {
		return x.PartNumber
	}
	return ""
}

func (x *Chassis) GetChassisType() ChassisType {
	if x != nil {
		return x.ChassisType
	}
	return ChassisType_MAIN_CHASSIS
}

func (x *Chassis) GetSlots() []*Slot {
	if x != nil {
		return x.Slots
	}
	return nil
}

func (x *Chassis) GetPowerSupplies() []*PowerSupply {
	if x != nil {
		return x.PowerSupplies
	}
	return nil
}

func (x *Chassis) GetFans() []*Fan {
	if x != nil {
		return x.Fans
	}
	return nil
}

func (x *Chassis) GetSensors() []*Sensor {
	if x != nil {
		return x.Sensors
	}
	return nil
}

func (x *Chassis) GetStatus() TreeNodeStatus {
	if x != nil {
		return x.Status
	}
	return TreeNodeStatus_UNKNOWN
}

// Physical slot for cards/modules
type Slot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SlotNumber    int32          `protobuf:"varint,3,opt,name=slot_number,json=slotNumber,proto3" json:"slot_number,omitempty"`
	SlotType      SlotType       `protobuf:"varint,4,opt,name=slot_type,json=slotType,proto3,enum=types.SlotType" json:"slot_type,omitempty"`
	InstalledCard *Card          `protobuf:"bytes,5,opt,name=installed_card,json=installedCard,proto3" json:"installed_card,omitempty"`
	Status        TreeNodeStatus `protobuf:"varint,6,opt,name=status,proto3,enum=types.TreeNodeStatus" json:"status,omitempty"`
}

func (x *Slot) Reset() {
	*x = Slot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_device_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slot) ProtoMessage() {}

func (x *Slot) ProtoReflect() protoreflect.Message {
	mi := &file_network_device_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slot.ProtoReflect.Descriptor instead.
func (*Slot) Descriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{7}
}

func (x *Slot) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Slot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Slot) GetSlotNumber() int32 {
	if x != nil {
		return x.SlotNumber
	}
	return 0
}

func (x *Slot) GetSlotType() SlotType {
	if x != nil {
		return x.SlotType
	}
	return SlotType_LINE_CARD
}

func (x *Slot) GetInstalledCard() *Card {
	if x != nil {
		return x.InstalledCard
	}
	return nil
}

func (x *Slot) GetStatus() TreeNodeStatus {
	if x != nil {
		return x.Status
	}
	return TreeNodeStatus_UNKNOWN
}

// Physical card/module
type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SerialNumber string         `protobuf:"bytes,3,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	PartNumber   string         `protobuf:"bytes,4,opt,name=part_number,json=partNumber,proto3" json:"part_number,omitempty"`
	CardType     CardType       `protobuf:"varint,5,opt,name=card_type,json=cardType,proto3,enum=types.CardType" json:"card_type,omitempty"`
	Ports        []*Port        `protobuf:"bytes,6,rep,name=ports,proto3" json:"ports,omitempty"`
	SubCards     []*SubCard     `protobuf:"bytes,7,rep,name=sub_cards,json=subCards,proto3" json:"sub_cards,omitempty"`
	Status       TreeNodeStatus `protobuf:"varint,8,opt,name=status,proto3,enum=types.TreeNodeStatus" json:"status,omitempty"`
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_device_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_network_device_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{8}
}

func (x *Card) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Card) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Card) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *Card) GetPartNumber() string {
	if x != nil {
		return x.PartNumber
	}
	return ""
}

func (x *Card) GetCardType() CardType {
	if x != nil {
		return x.CardType
	}
	return CardType_LINE_CARD_TYPE
}

func (x *Card) GetPorts() []*Port {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *Card) GetSubCards() []*SubCard {
	if x != nil {
		return x.SubCards
	}
	return nil
}

func (x *Card) GetStatus() TreeNodeStatus {
	if x != nil {
		return x.Status
	}
	return TreeNodeStatus_UNKNOWN
}

// Sub-card or daughter card
type SubCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SerialNumber string         `protobuf:"bytes,3,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	PartNumber   string         `protobuf:"bytes,4,opt,name=part_number,json=partNumber,proto3" json:"part_number,omitempty"`
	Ports        []*Port        `protobuf:"bytes,5,rep,name=ports,proto3" json:"ports,omitempty"`
	Status       TreeNodeStatus `protobuf:"varint,6,opt,name=status,proto3,enum=types.TreeNodeStatus" json:"status,omitempty"`
}

func (x *SubCard) Reset() {
	*x = SubCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_device_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubCard) ProtoMessage() {}

func (x *SubCard) ProtoReflect() protoreflect.Message {
	mi := &file_network_device_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubCard.ProtoReflect.Descriptor instead.
func (*SubCard) Descriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{9}
}

func (x *SubCard) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SubCard) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubCard) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *SubCard) GetPartNumber() string {
	if x != nil {
		return x.PartNumber
	}
	return ""
}

func (x *SubCard) GetPorts() []*Port {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *SubCard) GetStatus() TreeNodeStatus {
	if x != nil {
		return x.Status
	}
	return TreeNodeStatus_UNKNOWN
}

// Physical port
type Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PortNumber        int32               `protobuf:"varint,3,opt,name=port_number,json=portNumber,proto3" json:"port_number,omitempty"`
	PortType          PortType            `protobuf:"varint,4,opt,name=port_type,json=portType,proto3,enum=types.PortType" json:"port_type,omitempty"`
	Speed             PortSpeed           `protobuf:"varint,5,opt,name=speed,proto3,enum=types.PortSpeed" json:"speed,omitempty"`
	Duplex            PortDuplex          `protobuf:"varint,6,opt,name=duplex,proto3,enum=types.PortDuplex" json:"duplex,omitempty"`
	Transceiver       *Transceiver        `protobuf:"bytes,7,opt,name=transceiver,proto3" json:"transceiver,omitempty"`
	LogicalInterfaces []*LogicalInterface `protobuf:"bytes,8,rep,name=logical_interfaces,json=logicalInterfaces,proto3" json:"logical_interfaces,omitempty"`
	Status            TreeNodeStatus      `protobuf:"varint,9,opt,name=status,proto3,enum=types.TreeNodeStatus" json:"status,omitempty"`
	Statistics        *PortStatistics     `protobuf:"bytes,10,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *Port) Reset() {
	*x = Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_device_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Port) ProtoMessage() {}

func (x *Port) ProtoReflect() protoreflect.Message {
	mi := &file_network_device_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Port.ProtoReflect.Descriptor instead.
func (*Port) Descriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{10}
}

func (x *Port) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Port) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Port) GetPortNumber() int32 {
	if x != nil {
		return x.PortNumber
	}
	return 0
}

func (x *Port) GetPortType() PortType {
	if x != nil {
		return x.PortType
	}
	return PortType_ETHERNET
}

func (x *Port) GetSpeed() PortSpeed {
	if x != nil {
		return x.Speed
	}
	return PortSpeed_SPEED_10M
}

func (x *Port) GetDuplex() PortDuplex {
	if x != nil {
		return x.Duplex
	}
	return PortDuplex_HALF_DUPLEX
}

func (x *Port) GetTransceiver() *Transceiver {
	if x != nil {
		return x.Transceiver
	}
	return nil
}

func (x *Port) GetLogicalInterfaces() []*LogicalInterface {
	if x != nil {
		return x.LogicalInterfaces
	}
	return nil
}

func (x *Port) GetStatus() TreeNodeStatus {
	if x != nil {
		return x.Status
	}
	return TreeNodeStatus_UNKNOWN
}

func (x *Port) GetStatistics() *PortStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

// Physical transceiver/optic
type Transceiver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SerialNumber    string          `protobuf:"bytes,3,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	PartNumber      string          `protobuf:"bytes,4,opt,name=part_number,json=partNumber,proto3" json:"part_number,omitempty"`
	TransceiverType TransceiverType `protobuf:"varint,5,opt,name=transceiver_type,json=transceiverType,proto3,enum=types.TransceiverType" json:"transceiver_type,omitempty"`
	ConnectorType   string          `protobuf:"bytes,6,opt,name=connector_type,json=connectorType,proto3" json:"connector_type,omitempty"`
	Wavelength      int32           `protobuf:"varint,7,opt,name=wavelength,proto3" json:"wavelength,omitempty"`
	PowerTx         float64         `protobuf:"fixed64,8,opt,name=power_tx,json=powerTx,proto3" json:"power_tx,omitempty"`
	PowerRx         float64         `protobuf:"fixed64,9,opt,name=power_rx,json=powerRx,proto3" json:"power_rx,omitempty"`
	Status          TreeNodeStatus  `protobuf:"varint,10,opt,name=status,proto3,enum=types.TreeNodeStatus" json:"status,omitempty"`
}

func (x *Transceiver) Reset() {
	*x = Transceiver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_device_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transceiver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transceiver) ProtoMessage() {}

func (x *Transceiver) ProtoReflect() protoreflect.Message {
	mi := &file_network_device_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transceiver.ProtoReflect.Descriptor instead.
func (*Transceiver) Descriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{11}
}

func (x *Transceiver) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Transceiver) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Transceiver) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *Transceiver) GetPartNumber() string {
	if x != nil {
		return x.PartNumber
	}
	return ""
}

func (x *Transceiver) GetTransceiverType() TransceiverType {
	if x != nil {
		return x.TransceiverType
	}
	return TransceiverType_SFP
}

func (x *Transceiver) GetConnectorType() string {
	if x != nil {
		return x.ConnectorType
	}
	return ""
}

func (x *Transceiver) GetWavelength() int32 {
	if x != nil {
		return x.Wavelength
	}
	return 0
}

func (x *Transceiver) GetPowerTx() float64 {
	if x != nil {
		return x.PowerTx
	}
	return 0
}

func (x *Transceiver) GetPowerRx() float64 {
	if x != nil {
		return x.PowerRx
	}
	return 0
}

func (x *Transceiver) GetStatus() TreeNodeStatus {
	if x != nil {
		return x.Status
	}
	return TreeNodeStatus_UNKNOWN
}

// Power supply unit
type PowerSupply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SerialNumber  string         `protobuf:"bytes,3,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	CapacityWatts float64        `protobuf:"fixed64,4,opt,name=capacity_watts,json=capacityWatts,proto3" json:"capacity_watts,omitempty"`
	CurrentDraw   float64        `protobuf:"fixed64,5,opt,name=current_draw,json=currentDraw,proto3" json:"current_draw,omitempty"`
	Status        TreeNodeStatus `protobuf:"varint,6,opt,name=status,proto3,enum=types.TreeNodeStatus" json:"status,omitempty"`
}

func (x *PowerSupply) Reset() {
	*x = PowerSupply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_device_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerSupply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerSupply) ProtoMessage() {}

func (x *PowerSupply) ProtoReflect() protoreflect.Message {
	mi := &file_network_device_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerSupply.ProtoReflect.Descriptor instead.
func (*PowerSupply) Descriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{12}
}

func (x *PowerSupply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PowerSupply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PowerSupply) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *PowerSupply) GetCapacityWatts() float64 {
	if x != nil {
		return x.CapacityWatts
	}
	return 0
}

func (x *PowerSupply) GetCurrentDraw() float64 {
	if x != nil {
		return x.CurrentDraw
	}
	return 0
}

func (x *PowerSupply) GetStatus() TreeNodeStatus {
	if x != nil {
		return x.Status
	}
	return TreeNodeStatus_UNKNOWN
}

// Cooling fan
type Fan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SpeedRpm int32          `protobuf:"varint,3,opt,name=speed_rpm,json=speedRpm,proto3" json:"speed_rpm,omitempty"`
	Status   TreeNodeStatus `protobuf:"varint,4,opt,name=status,proto3,enum=types.TreeNodeStatus" json:"status,omitempty"`
}

func (x *Fan) Reset() {
	*x = Fan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_device_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fan) ProtoMessage() {}

func (x *Fan) ProtoReflect() protoreflect.Message {
	mi := &file_network_device_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fan.ProtoReflect.Descriptor instead.
func (*Fan) Descriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{13}
}

func (x *Fan) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Fan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Fan) GetSpeedRpm() int32 {
	if x != nil {
		return x.SpeedRpm
	}
	return 0
}

func (x *Fan) GetStatus() TreeNodeStatus {
	if x != nil {
		return x.Status
	}
	return TreeNodeStatus_UNKNOWN
}

// Environmental sensor
type Sensor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SensorType        SensorType     `protobuf:"varint,3,opt,name=sensor_type,json=sensorType,proto3,enum=types.SensorType" json:"sensor_type,omitempty"`
	CurrentValue      float64        `protobuf:"fixed64,4,opt,name=current_value,json=currentValue,proto3" json:"current_value,omitempty"`
	ThresholdWarning  float64        `protobuf:"fixed64,5,opt,name=threshold_warning,json=thresholdWarning,proto3" json:"threshold_warning,omitempty"`
	ThresholdCritical float64        `protobuf:"fixed64,6,opt,name=threshold_critical,json=thresholdCritical,proto3" json:"threshold_critical,omitempty"`
	Units             string         `protobuf:"bytes,7,opt,name=units,proto3" json:"units,omitempty"`
	Status            TreeNodeStatus `protobuf:"varint,8,opt,name=status,proto3,enum=types.TreeNodeStatus" json:"status,omitempty"`
}

func (x *Sensor) Reset() {
	*x = Sensor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_device_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sensor) ProtoMessage() {}

func (x *Sensor) ProtoReflect() protoreflect.Message {
	mi := &file_network_device_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sensor.ProtoReflect.Descriptor instead.
func (*Sensor) Descriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{14}
}

func (x *Sensor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Sensor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sensor) GetSensorType() SensorType {
	if x != nil {
		return x.SensorType
	}
	return SensorType_TEMPERATURE
}

func (x *Sensor) GetCurrentValue() float64 {
	if x != nil {
		return x.CurrentValue
	}
	return 0
}

func (x *Sensor) GetThresholdWarning() float64 {
	if x != nil {
		return x.ThresholdWarning
	}
	return 0
}

func (x *Sensor) GetThresholdCritical() float64 {
	if x != nil {
		return x.ThresholdCritical
	}
	return 0
}

func (x *Sensor) GetUnits() string {
	if x != nil {
		return x.Units
	}
	return ""
}

func (x *Sensor) GetStatus() TreeNodeStatus {
	if x != nil {
		return x.Status
	}
	return TreeNodeStatus_UNKNOWN
}

// Logical layer representation
type LogicalLayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root          *TreeNode           `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	InterfaceList []*LogicalInterface `protobuf:"bytes,2,rep,name=interface_list,json=interfaceList,proto3" json:"interface_list,omitempty"`
	VlanList      []*VLAN             `protobuf:"bytes,3,rep,name=vlan_list,json=vlanList,proto3" json:"vlan_list,omitempty"`
	VrfList       []*VRF              `protobuf:"bytes,4,rep,name=vrf_list,json=vrfList,proto3" json:"vrf_list,omitempty"`
	BridgeList    []*Bridge           `protobuf:"bytes,5,rep,name=bridge_list,json=bridgeList,proto3" json:"bridge_list,omitempty"`
	TunnelList    []*Tunnel           `protobuf:"bytes,6,rep,name=tunnel_list,json=tunnelList,proto3" json:"tunnel_list,omitempty"`
}

func (x *LogicalLayer) Reset() {
	*x = LogicalLayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_device_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalLayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalLayer) ProtoMessage() {}

func (x *LogicalLayer) ProtoReflect() protoreflect.Message {
	mi := &file_network_device_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalLayer.ProtoReflect.Descriptor instead.
func (*LogicalLayer) Descriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{15}
}

func (x *LogicalLayer) GetRoot() *TreeNode {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *LogicalLayer) GetInterfaceList() []*LogicalInterface {
	if x != nil {
		return x.InterfaceList
	}
	return nil
}

func (x *LogicalLayer) GetVlanList() []*VLAN {
	if x != nil {
		return x.VlanList
	}
	return nil
}

func (x *LogicalLayer) GetVrfList() []*VRF {
	if x != nil {
		return x.VrfList
	}
	return nil
}

func (x *LogicalLayer) GetBridgeList() []*Bridge {
	if x != nil {
		return x.BridgeList
	}
	return nil
}

func (x *LogicalLayer) GetTunnelList() []*Tunnel {
	if x != nil {
		return x.TunnelList
	}
	return nil
}

// Logical interface
type LogicalInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	InterfaceType InterfaceType        `protobuf:"varint,3,opt,name=interface_type,json=interfaceType,proto3,enum=types.InterfaceType" json:"interface_type,omitempty"`
	Description   string               `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	IpAddresses   []string             `protobuf:"bytes,5,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
	MacAddress    string               `protobuf:"bytes,6,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	Mtu           int32                `protobuf:"varint,7,opt,name=mtu,proto3" json:"mtu,omitempty"`
	Vlans         []*VLAN              `protobuf:"bytes,8,rep,name=vlans,proto3" json:"vlans,omitempty"`
	Vrf           *VRF                 `protobuf:"bytes,9,opt,name=vrf,proto3" json:"vrf,omitempty"`
	Status        TreeNodeStatus       `protobuf:"varint,10,opt,name=status,proto3,enum=types.TreeNodeStatus" json:"status,omitempty"`
	Statistics    *InterfaceStatistics `protobuf:"bytes,11,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *LogicalInterface) Reset() {
	*x = LogicalInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_device_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalInterface) ProtoMessage() {}

func (x *LogicalInterface) ProtoReflect() protoreflect.Message {
	mi := &file_network_device_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalInterface.ProtoReflect.Descriptor instead.
func (*LogicalInterface) Descriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{16}
}

func (x *LogicalInterface) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LogicalInterface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LogicalInterface) GetInterfaceType() InterfaceType {
	if x != nil {
		return x.InterfaceType
	}
	return InterfaceType_PHYSICAL_INTERFACE
}

func (x *LogicalInterface) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LogicalInterface) GetIpAddresses() []string {
	if x != nil {
		return x.IpAddresses
	}
	return nil
}

func (x *LogicalInterface) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *LogicalInterface) GetMtu() int32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *LogicalInterface) GetVlans() []*VLAN {
	if x != nil {
		return x.Vlans
	}
	return nil
}

func (x *LogicalInterface) GetVrf() *VRF {
	if x != nil {
		return x.Vrf
	}
	return nil
}

func (x *LogicalInterface) GetStatus() TreeNodeStatus {
	if x != nil {
		return x.Status
	}
	return TreeNodeStatus_UNKNOWN
}

func (x *LogicalInterface) GetStatistics() *InterfaceStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

// Virtual LAN
type VLAN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	VlanId           int32               `protobuf:"varint,3,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	Description      string              `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	MemberInterfaces []*LogicalInterface `protobuf:"bytes,5,rep,name=member_interfaces,json=memberInterfaces,proto3" json:"member_interfaces,omitempty"`
	Status           TreeNodeStatus      `protobuf:"varint,6,opt,name=status,proto3,enum=types.TreeNodeStatus" json:"status,omitempty"`
}

func (x *VLAN) Reset() {
	*x = VLAN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_device_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VLAN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VLAN) ProtoMessage() {}

func (x *VLAN) ProtoReflect() protoreflect.Message {
	mi := &file_network_device_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VLAN.ProtoReflect.Descriptor instead.
func (*VLAN) Descriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{17}
}

func (x *VLAN) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VLAN) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VLAN) GetVlanId() int32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *VLAN) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VLAN) GetMemberInterfaces() []*LogicalInterface {
	if x != nil {
		return x.MemberInterfaces
	}
	return nil
}

func (x *VLAN) GetStatus() TreeNodeStatus {
	if x != nil {
		return x.Status
	}
	return TreeNodeStatus_UNKNOWN
}

// Virtual Routing and Forwarding
type VRF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RouteDistinguisher string              `protobuf:"bytes,3,opt,name=route_distinguisher,json=routeDistinguisher,proto3" json:"route_distinguisher,omitempty"`
	RouteTargets       []string            `protobuf:"bytes,4,rep,name=route_targets,json=routeTargets,proto3" json:"route_targets,omitempty"`
	MemberInterfaces   []*LogicalInterface `protobuf:"bytes,5,rep,name=member_interfaces,json=memberInterfaces,proto3" json:"member_interfaces,omitempty"`
	Status             TreeNodeStatus      `protobuf:"varint,6,opt,name=status,proto3,enum=types.TreeNodeStatus" json:"status,omitempty"`
}

func (x *VRF) Reset() {
	*x = VRF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_device_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VRF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VRF) ProtoMessage() {}

func (x *VRF) ProtoReflect() protoreflect.Message {
	mi := &file_network_device_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VRF.ProtoReflect.Descriptor instead.
func (*VRF) Descriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{18}
}

func (x *VRF) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VRF) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VRF) GetRouteDistinguisher() string {
	if x != nil {
		return x.RouteDistinguisher
	}
	return ""
}

func (x *VRF) GetRouteTargets() []string {
	if x != nil {
		return x.RouteTargets
	}
	return nil
}

func (x *VRF) GetMemberInterfaces() []*LogicalInterface {
	if x != nil {
		return x.MemberInterfaces
	}
	return nil
}

func (x *VRF) GetStatus() TreeNodeStatus {
	if x != nil {
		return x.Status
	}
	return TreeNodeStatus_UNKNOWN
}

// Bridge domain
type Bridge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BridgeId         int32               `protobuf:"varint,3,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
	MemberInterfaces []*LogicalInterface `protobuf:"bytes,4,rep,name=member_interfaces,json=memberInterfaces,proto3" json:"member_interfaces,omitempty"`
	Status           TreeNodeStatus      `protobuf:"varint,5,opt,name=status,proto3,enum=types.TreeNodeStatus" json:"status,omitempty"`
}

func (x *Bridge) Reset() {
	*x = Bridge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_device_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bridge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bridge) ProtoMessage() {}

func (x *Bridge) ProtoReflect() protoreflect.Message {
	mi := &file_network_device_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bridge.ProtoReflect.Descriptor instead.
func (*Bridge) Descriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{19}
}

func (x *Bridge) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Bridge) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Bridge) GetBridgeId() int32 {
	if x != nil {
		return x.BridgeId
	}
	return 0
}

func (x *Bridge) GetMemberInterfaces() []*LogicalInterface {
	if x != nil {
		return x.MemberInterfaces
	}
	return nil
}

func (x *Bridge) GetStatus() TreeNodeStatus {
	if x != nil {
		return x.Status
	}
	return TreeNodeStatus_UNKNOWN
}

// Tunnel interface
type Tunnel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TunnelType         TunnelType     `protobuf:"varint,3,opt,name=tunnel_type,json=tunnelType,proto3,enum=types.TunnelType" json:"tunnel_type,omitempty"`
	SourceAddress      string         `protobuf:"bytes,4,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	DestinationAddress string         `protobuf:"bytes,5,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	Status             TreeNodeStatus `protobuf:"varint,6,opt,name=status,proto3,enum=types.TreeNodeStatus" json:"status,omitempty"`
}

func (x *Tunnel) Reset() {
	*x = Tunnel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_device_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tunnel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tunnel) ProtoMessage() {}

func (x *Tunnel) ProtoReflect() protoreflect.Message {
	mi := &file_network_device_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tunnel.ProtoReflect.Descriptor instead.
func (*Tunnel) Descriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{20}
}

func (x *Tunnel) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tunnel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tunnel) GetTunnelType() TunnelType {
	if x != nil {
		return x.TunnelType
	}
	return TunnelType_GRE
}

func (x *Tunnel) GetSourceAddress() string {
	if x != nil {
		return x.SourceAddress
	}
	return ""
}

func (x *Tunnel) GetDestinationAddress() string {
	if x != nil {
		return x.DestinationAddress
	}
	return ""
}

func (x *Tunnel) GetStatus() TreeNodeStatus {
	if x != nil {
		return x.Status
	}
	return TreeNodeStatus_UNKNOWN
}

// Technology layer representation
type TechnologyLayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root                *TreeNode             `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	RoutingProtocols    []*RoutingProtocol    `protobuf:"bytes,2,rep,name=routing_protocols,json=routingProtocols,proto3" json:"routing_protocols,omitempty"`
	SwitchingProtocols  []*SwitchingProtocol  `protobuf:"bytes,3,rep,name=switching_protocols,json=switchingProtocols,proto3" json:"switching_protocols,omitempty"`
	SecurityProtocols   []*SecurityProtocol   `protobuf:"bytes,4,rep,name=security_protocols,json=securityProtocols,proto3" json:"security_protocols,omitempty"`
	QosProtocols        []*QoSProtocol        `protobuf:"bytes,5,rep,name=qos_protocols,json=qosProtocols,proto3" json:"qos_protocols,omitempty"`
	ManagementProtocols []*ManagementProtocol `protobuf:"bytes,6,rep,name=management_protocols,json=managementProtocols,proto3" json:"management_protocols,omitempty"`
}

func (x *TechnologyLayer) Reset() {
	*x = TechnologyLayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_device_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TechnologyLayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechnologyLayer) ProtoMessage() {}

func (x *TechnologyLayer) ProtoReflect() protoreflect.Message {
	mi := &file_network_device_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TechnologyLayer.ProtoReflect.Descriptor instead.
func (*TechnologyLayer) Descriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{21}
}

func (x *TechnologyLayer) GetRoot() *TreeNode {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *TechnologyLayer) GetRoutingProtocols() []*RoutingProtocol {
	if x != nil {
		return x.RoutingProtocols
	}
	return nil
}

func (x *TechnologyLayer) GetSwitchingProtocols() []*SwitchingProtocol {
	if x != nil {
		return x.SwitchingProtocols
	}
	return nil
}

func (x *TechnologyLayer) GetSecurityProtocols() []*SecurityProtocol {
	if x != nil {
		return x.SecurityProtocols
	}
	return nil
}

func (x *TechnologyLayer) GetQosProtocols() []*QoSProtocol {
	if x != nil {
		return x.QosProtocols
	}
	return nil
}

func (x *TechnologyLayer) GetManagementProtocols() []*ManagementProtocol {
	if x != nil {
		return x.ManagementProtocols
	}
	return nil
}

// Routing protocol
type RoutingProtocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProtocolType  RoutingProtocolType `protobuf:"varint,3,opt,name=protocol_type,json=protocolType,proto3,enum=types.RoutingProtocolType" json:"protocol_type,omitempty"`
	Networks      []string            `protobuf:"bytes,4,rep,name=networks,proto3" json:"networks,omitempty"`
	Configuration map[string]string   `protobuf:"bytes,5,rep,name=configuration,proto3" json:"configuration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Status        TreeNodeStatus      `protobuf:"varint,6,opt,name=status,proto3,enum=types.TreeNodeStatus" json:"status,omitempty"`
}

func (x *RoutingProtocol) Reset() {
	*x = RoutingProtocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_device_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingProtocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingProtocol) ProtoMessage() {}

func (x *RoutingProtocol) ProtoReflect() protoreflect.Message {
	mi := &file_network_device_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingProtocol.ProtoReflect.Descriptor instead.
func (*RoutingProtocol) Descriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{22}
}

func (x *RoutingProtocol) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RoutingProtocol) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RoutingProtocol) GetProtocolType() RoutingProtocolType {
	if x != nil {
		return x.ProtocolType
	}
	return RoutingProtocolType_STATIC
}

func (x *RoutingProtocol) GetNetworks() []string {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *RoutingProtocol) GetConfiguration() map[string]string {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *RoutingProtocol) GetStatus() TreeNodeStatus {
	if x != nil {
		return x.Status
	}
	return TreeNodeStatus_UNKNOWN
}

// Switching protocol
type SwitchingProtocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProtocolType  SwitchingProtocolType `protobuf:"varint,3,opt,name=protocol_type,json=protocolType,proto3,enum=types.SwitchingProtocolType" json:"protocol_type,omitempty"`
	Configuration map[string]string     `protobuf:"bytes,4,rep,name=configuration,proto3" json:"configuration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Status        TreeNodeStatus        `protobuf:"varint,5,opt,name=status,proto3,enum=types.TreeNodeStatus" json:"status,omitempty"`
}

func (x *SwitchingProtocol) Reset() {
	*x = SwitchingProtocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_device_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchingProtocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchingProtocol) ProtoMessage() {}

func (x *SwitchingProtocol) ProtoReflect() protoreflect.Message {
	mi := &file_network_device_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchingProtocol.ProtoReflect.Descriptor instead.
func (*SwitchingProtocol) Descriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{23}
}

func (x *SwitchingProtocol) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SwitchingProtocol) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SwitchingProtocol) GetProtocolType() SwitchingProtocolType {
	if x != nil {
		return x.ProtocolType
	}
	return SwitchingProtocolType_STP
}

func (x *SwitchingProtocol) GetConfiguration() map[string]string {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *SwitchingProtocol) GetStatus() TreeNodeStatus {
	if x != nil {
		return x.Status
	}
	return TreeNodeStatus_UNKNOWN
}

// Security protocol
type SecurityProtocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProtocolType  SecurityProtocolType `protobuf:"varint,3,opt,name=protocol_type,json=protocolType,proto3,enum=types.SecurityProtocolType" json:"protocol_type,omitempty"`
	Configuration map[string]string    `protobuf:"bytes,4,rep,name=configuration,proto3" json:"configuration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Status        TreeNodeStatus       `protobuf:"varint,5,opt,name=status,proto3,enum=types.TreeNodeStatus" json:"status,omitempty"`
}

func (x *SecurityProtocol) Reset() {
	*x = SecurityProtocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_device_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityProtocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityProtocol) ProtoMessage() {}

func (x *SecurityProtocol) ProtoReflect() protoreflect.Message {
	mi := &file_network_device_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityProtocol.ProtoReflect.Descriptor instead.
func (*SecurityProtocol) Descriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{24}
}

func (x *SecurityProtocol) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SecurityProtocol) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SecurityProtocol) GetProtocolType() SecurityProtocolType {
	if x != nil {
		return x.ProtocolType
	}
	return SecurityProtocolType_ACL
}

func (x *SecurityProtocol) GetConfiguration() map[string]string {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *SecurityProtocol) GetStatus() TreeNodeStatus {
	if x != nil {
		return x.Status
	}
	return TreeNodeStatus_UNKNOWN
}

// Quality of Service protocol
type QoSProtocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProtocolType  QoSProtocolType   `protobuf:"varint,3,opt,name=protocol_type,json=protocolType,proto3,enum=types.QoSProtocolType" json:"protocol_type,omitempty"`
	Configuration map[string]string `protobuf:"bytes,4,rep,name=configuration,proto3" json:"configuration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Status        TreeNodeStatus    `protobuf:"varint,5,opt,name=status,proto3,enum=types.TreeNodeStatus" json:"status,omitempty"`
}

func (x *QoSProtocol) Reset() {
	*x = QoSProtocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_device_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QoSProtocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QoSProtocol) ProtoMessage() {}

func (x *QoSProtocol) ProtoReflect() protoreflect.Message {
	mi := &file_network_device_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QoSProtocol.ProtoReflect.Descriptor instead.
func (*QoSProtocol) Descriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{25}
}

func (x *QoSProtocol) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QoSProtocol) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QoSProtocol) GetProtocolType() QoSProtocolType {
	if x != nil {
		return x.ProtocolType
	}
	return QoSProtocolType_DIFFSERV
}

func (x *QoSProtocol) GetConfiguration() map[string]string {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *QoSProtocol) GetStatus() TreeNodeStatus {
	if x != nil {
		return x.Status
	}
	return TreeNodeStatus_UNKNOWN
}

// Management protocol
type ManagementProtocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProtocolType  ManagementProtocolType `protobuf:"varint,3,opt,name=protocol_type,json=protocolType,proto3,enum=types.ManagementProtocolType" json:"protocol_type,omitempty"`
	Configuration map[string]string      `protobuf:"bytes,4,rep,name=configuration,proto3" json:"configuration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Status        TreeNodeStatus         `protobuf:"varint,5,opt,name=status,proto3,enum=types.TreeNodeStatus" json:"status,omitempty"`
}

func (x *ManagementProtocol) Reset() {
	*x = ManagementProtocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_device_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagementProtocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagementProtocol) ProtoMessage() {}

func (x *ManagementProtocol) ProtoReflect() protoreflect.Message {
	mi := &file_network_device_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagementProtocol.ProtoReflect.Descriptor instead.
func (*ManagementProtocol) Descriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{26}
}

func (x *ManagementProtocol) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ManagementProtocol) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ManagementProtocol) GetProtocolType() ManagementProtocolType {
	if x != nil {
		return x.ProtocolType
	}
	return ManagementProtocolType_SNMP
}

func (x *ManagementProtocol) GetConfiguration() map[string]string {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *ManagementProtocol) GetStatus() TreeNodeStatus {
	if x != nil {
		return x.Status
	}
	return TreeNodeStatus_UNKNOWN
}

// Relationship between components
type Relationship struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SourceId         string            `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	TargetId         string            `protobuf:"bytes,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	RelationshipType RelationshipType  `protobuf:"varint,4,opt,name=relationship_type,json=relationshipType,proto3,enum=types.RelationshipType" json:"relationship_type,omitempty"`
	Description      string            `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Attributes       map[string]string `protobuf:"bytes,6,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Relationship) Reset() {
	*x = Relationship{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_device_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Relationship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relationship) ProtoMessage() {}

func (x *Relationship) ProtoReflect() protoreflect.Message {
	mi := &file_network_device_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relationship.ProtoReflect.Descriptor instead.
func (*Relationship) Descriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{27}
}

func (x *Relationship) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Relationship) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *Relationship) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *Relationship) GetRelationshipType() RelationshipType {
	if x != nil {
		return x.RelationshipType
	}
	return RelationshipType_CONTAINS
}

func (x *Relationship) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Relationship) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// Statistics for ports
type PortStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesIn    int64 `protobuf:"varint,1,opt,name=bytes_in,json=bytesIn,proto3" json:"bytes_in,omitempty"`
	BytesOut   int64 `protobuf:"varint,2,opt,name=bytes_out,json=bytesOut,proto3" json:"bytes_out,omitempty"`
	PacketsIn  int64 `protobuf:"varint,3,opt,name=packets_in,json=packetsIn,proto3" json:"packets_in,omitempty"`
	PacketsOut int64 `protobuf:"varint,4,opt,name=packets_out,json=packetsOut,proto3" json:"packets_out,omitempty"`
	ErrorsIn   int64 `protobuf:"varint,5,opt,name=errors_in,json=errorsIn,proto3" json:"errors_in,omitempty"`
	ErrorsOut  int64 `protobuf:"varint,6,opt,name=errors_out,json=errorsOut,proto3" json:"errors_out,omitempty"`
	DropsIn    int64 `protobuf:"varint,7,opt,name=drops_in,json=dropsIn,proto3" json:"drops_in,omitempty"`
	DropsOut   int64 `protobuf:"varint,8,opt,name=drops_out,json=dropsOut,proto3" json:"drops_out,omitempty"`
}

func (x *PortStatistics) Reset() {
	*x = PortStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_device_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortStatistics) ProtoMessage() {}

func (x *PortStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_network_device_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortStatistics.ProtoReflect.Descriptor instead.
func (*PortStatistics) Descriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{28}
}

func (x *PortStatistics) GetBytesIn() int64 {
	if x != nil {
		return x.BytesIn
	}
	return 0
}

func (x *PortStatistics) GetBytesOut() int64 {
	if x != nil {
		return x.BytesOut
	}
	return 0
}

func (x *PortStatistics) GetPacketsIn() int64 {
	if x != nil {
		return x.PacketsIn
	}
	return 0
}

func (x *PortStatistics) GetPacketsOut() int64 {
	if x != nil {
		return x.PacketsOut
	}
	return 0
}

func (x *PortStatistics) GetErrorsIn() int64 {
	if x != nil {
		return x.ErrorsIn
	}
	return 0
}

func (x *PortStatistics) GetErrorsOut() int64 {
	if x != nil {
		return x.ErrorsOut
	}
	return 0
}

func (x *PortStatistics) GetDropsIn() int64 {
	if x != nil {
		return x.DropsIn
	}
	return 0
}

func (x *PortStatistics) GetDropsOut() int64 {
	if x != nil {
		return x.DropsOut
	}
	return 0
}

// Statistics for interfaces
type InterfaceStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesIn             int64 `protobuf:"varint,1,opt,name=bytes_in,json=bytesIn,proto3" json:"bytes_in,omitempty"`
	BytesOut            int64 `protobuf:"varint,2,opt,name=bytes_out,json=bytesOut,proto3" json:"bytes_out,omitempty"`
	PacketsIn           int64 `protobuf:"varint,3,opt,name=packets_in,json=packetsIn,proto3" json:"packets_in,omitempty"`
	PacketsOut          int64 `protobuf:"varint,4,opt,name=packets_out,json=packetsOut,proto3" json:"packets_out,omitempty"`
	UnicastPacketsIn    int64 `protobuf:"varint,5,opt,name=unicast_packets_in,json=unicastPacketsIn,proto3" json:"unicast_packets_in,omitempty"`
	UnicastPacketsOut   int64 `protobuf:"varint,6,opt,name=unicast_packets_out,json=unicastPacketsOut,proto3" json:"unicast_packets_out,omitempty"`
	MulticastPacketsIn  int64 `protobuf:"varint,7,opt,name=multicast_packets_in,json=multicastPacketsIn,proto3" json:"multicast_packets_in,omitempty"`
	MulticastPacketsOut int64 `protobuf:"varint,8,opt,name=multicast_packets_out,json=multicastPacketsOut,proto3" json:"multicast_packets_out,omitempty"`
	BroadcastPacketsIn  int64 `protobuf:"varint,9,opt,name=broadcast_packets_in,json=broadcastPacketsIn,proto3" json:"broadcast_packets_in,omitempty"`
	BroadcastPacketsOut int64 `protobuf:"varint,10,opt,name=broadcast_packets_out,json=broadcastPacketsOut,proto3" json:"broadcast_packets_out,omitempty"`
	ErrorsIn            int64 `protobuf:"varint,11,opt,name=errors_in,json=errorsIn,proto3" json:"errors_in,omitempty"`
	ErrorsOut           int64 `protobuf:"varint,12,opt,name=errors_out,json=errorsOut,proto3" json:"errors_out,omitempty"`
	DropsIn             int64 `protobuf:"varint,13,opt,name=drops_in,json=dropsIn,proto3" json:"drops_in,omitempty"`
	DropsOut            int64 `protobuf:"varint,14,opt,name=drops_out,json=dropsOut,proto3" json:"drops_out,omitempty"`
}

func (x *InterfaceStatistics) Reset() {
	*x = InterfaceStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_device_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceStatistics) ProtoMessage() {}

func (x *InterfaceStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_network_device_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceStatistics.ProtoReflect.Descriptor instead.
func (*InterfaceStatistics) Descriptor() ([]byte, []int) {
	return file_network_device_proto_rawDescGZIP(), []int{29}
}

func (x *InterfaceStatistics) GetBytesIn() int64 {
	if x != nil {
		return x.BytesIn
	}
	return 0
}

func (x *InterfaceStatistics) GetBytesOut() int64 {
	if x != nil {
		return x.BytesOut
	}
	return 0
}

func (x *InterfaceStatistics) GetPacketsIn() int64 {
	if x != nil {
		return x.PacketsIn
	}
	return 0
}

func (x *InterfaceStatistics) GetPacketsOut() int64 {
	if x != nil {
		return x.PacketsOut
	}
	return 0
}

func (x *InterfaceStatistics) GetUnicastPacketsIn() int64 {
	if x != nil {
		return x.UnicastPacketsIn
	}
	return 0
}

func (x *InterfaceStatistics) GetUnicastPacketsOut() int64 {
	if x != nil {
		return x.UnicastPacketsOut
	}
	return 0
}

func (x *InterfaceStatistics) GetMulticastPacketsIn() int64 {
	if x != nil {
		return x.MulticastPacketsIn
	}
	return 0
}

func (x *InterfaceStatistics) GetMulticastPacketsOut() int64 {
	if x != nil {
		return x.MulticastPacketsOut
	}
	return 0
}

func (x *InterfaceStatistics) GetBroadcastPacketsIn() int64 {
	if x != nil {
		return x.BroadcastPacketsIn
	}
	return 0
}

func (x *InterfaceStatistics) GetBroadcastPacketsOut() int64 {
	if x != nil {
		return x.BroadcastPacketsOut
	}
	return 0
}

func (x *InterfaceStatistics) GetErrorsIn() int64 {
	if x != nil {
		return x.ErrorsIn
	}
	return 0
}

func (x *InterfaceStatistics) GetErrorsOut() int64 {
	if x != nil {
		return x.ErrorsOut
	}
	return 0
}

func (x *InterfaceStatistics) GetDropsIn() int64 {
	if x != nil {
		return x.DropsIn
	}
	return 0
}

func (x *InterfaceStatistics) GetDropsOut() int64 {
	if x != nil {
		return x.DropsOut
	}
	return 0
}

var File_network_device_proto protoreflect.FileDescriptor

var file_network_device_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0xf1, 0x02,
	0x0a, 0x08, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x72,
	0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x65,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12,
	0x27, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74,
	0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x3d, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x97, 0x03, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x0e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x0d, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x38, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0c, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x10, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x63,
	0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0f, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x30, 0x0a,
	0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x12,
	0x39, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0d, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x22, 0x58, 0x0a, 0x08, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x22, 0xdc, 0x03, 0x0a, 0x0d, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x29, 0x0a, 0x10, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x6f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4f, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61,
	0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2b,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x70, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0xfa, 0x01, 0x0a, 0x0d, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x65, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x31, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x08, 0x63,
	0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3d, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x52,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x80, 0x03, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73,
	0x12, 0x39, 0x0a, 0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x0d, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x04, 0x66,
	0x61, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x46, 0x61, 0x6e, 0x52, 0x04, 0x66, 0x61, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x07, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x65,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x6c, 0x6f, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x2c, 0x0a, 0x09, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x6c, 0x6f,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x32, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x65, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x9d, 0x02, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x53, 0x75, 0x62, 0x43, 0x61, 0x72, 0x64, 0x52, 0x08, 0x73, 0x75, 0x62, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x65, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x43, 0x61, 0x72, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb0, 0x03, 0x0a, 0x04, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6f,
	0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x6f,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x29,
	0x0a, 0x06, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x44, 0x75, 0x70, 0x6c, 0x65,
	0x78, 0x52, 0x06, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x12, 0x34, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12,
	0x46, 0x0a, 0x12, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x52, 0x11, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0xe6, 0x02,
	0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x78, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x78, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x72, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x78, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x0b, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x77, 0x61, 0x74, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x57, 0x61, 0x74, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x72, 0x61, 0x77, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x75, 0x0a, 0x03, 0x46, 0x61, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x70, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x70, 0x65, 0x65, 0x64, 0x52, 0x70, 0x6d,
	0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xa6, 0x02, 0x0a, 0x06, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32,
	0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x10, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x57, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x11, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x43, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa4, 0x02, 0x0a, 0x0c, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x04, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x3e,
	0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28,
	0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x4c, 0x41, 0x4e, 0x52, 0x08,
	0x76, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x08, 0x76, 0x72, 0x66, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x56, 0x52, 0x46, 0x52, 0x07, 0x76, 0x72, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x0b, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x52, 0x0a, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x0b, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x97, 0x03, 0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61,
	0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x74, 0x75, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x21, 0x0a,
	0x05, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x4c, 0x41, 0x4e, 0x52, 0x05, 0x76, 0x6c, 0x61, 0x6e, 0x73,
	0x12, 0x1c, 0x0a, 0x03, 0x76, 0x72, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x52, 0x46, 0x52, 0x03, 0x76, 0x72, 0x66, 0x12, 0x2d,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0xda, 0x01, 0x0a, 0x04, 0x56, 0x4c,
	0x41, 0x4e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x44, 0x0a, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf4, 0x01, 0x0a, 0x03, 0x56, 0x52, 0x46, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x11, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x10, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x2d,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbe, 0x01,
	0x0a, 0x06, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x11, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x10, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12,
	0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe7,
	0x01, 0x0a, 0x06, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a,
	0x0b, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x95, 0x03, 0x0a, 0x0f, 0x54, 0x65, 0x63,
	0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x04,
	0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6f,
	0x74, 0x12, 0x43, 0x0a, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x49, 0x0a, 0x13, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x12, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x12, 0x46, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x37, 0x0a, 0x0d, 0x71, 0x6f, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x51, 0x6f, 0x53, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x0c, 0x71, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x12, 0x4c, 0x0a, 0x14, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x13, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x22, 0xd4, 0x02, 0x0a, 0x0f, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x4f, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54,
	0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbe, 0x02, 0x0a, 0x11, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x41, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbb, 0x02, 0x0a, 0x10, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x40, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x72,
	0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xac, 0x02, 0x0a, 0x0b, 0x51, 0x6f, 0x53, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x51, 0x6f, 0x53, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x51, 0x6f, 0x53, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x65,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc1, 0x02, 0x0a, 0x12, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x42, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc4, 0x02, 0x0a, 0x0c, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xfc, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x79, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x49, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x72, 0x6f, 0x70, 0x73,
	0x5f, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x73,
	0x49, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x4f, 0x75, 0x74, 0x22,
	0xab, 0x04, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x49, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x12,
	0x2c, 0x0a, 0x12, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x12, 0x2e, 0x0a,
	0x13, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x5f, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x30, 0x0a,
	0x14, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x12,
	0x32, 0x0a, 0x15, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x4f, 0x75, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x49, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x49, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x5f, 0x6f, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x5f, 0x69,
	0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x49, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x4f, 0x75, 0x74, 0x2a, 0x62, 0x0a,
	0x0e, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x47, 0x52, 0x41, 0x44,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10,
	0x05, 0x2a, 0x87, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49,
	0x53, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44,
	0x5f, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x41,
	0x42, 0x52, 0x49, 0x43, 0x5f, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x10, 0x02, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49,
	0x53, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x43, 0x48,
	0x41, 0x53, 0x53, 0x49, 0x53, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x52, 0x5f, 0x43, 0x48, 0x41, 0x53, 0x53, 0x49, 0x53, 0x10, 0x05, 0x2a, 0x64, 0x0a, 0x08, 0x53,
	0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x49, 0x4e, 0x45, 0x5f,
	0x43, 0x41, 0x52, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x50, 0x45, 0x52, 0x56,
	0x49, 0x53, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x50, 0x50,
	0x4c, 0x59, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x41, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x59,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10,
	0x05, 0x2a, 0x6a, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x0e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x55, 0x50, 0x45, 0x52, 0x56, 0x49, 0x53, 0x4f, 0x52, 0x5f,
	0x43, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43,
	0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x04, 0x2a, 0x67, 0x0a,
	0x08, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x54, 0x48,
	0x45, 0x52, 0x4e, 0x45, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x42, 0x45, 0x52,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x54, 0x4d, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x4f, 0x4e, 0x45, 0x54,
	0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x4f, 0x53, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x57,
	0x49, 0x52, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x49, 0x52,
	0x54, 0x55, 0x41, 0x4c, 0x10, 0x07, 0x2a, 0xa4, 0x01, 0x0a, 0x09, 0x50, 0x6f, 0x72, 0x74, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x30,
	0x4d, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x30, 0x30,
	0x4d, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x47, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x30, 0x47, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x32, 0x35, 0x47, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x34, 0x30, 0x47, 0x10, 0x05, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x35, 0x30, 0x47, 0x10, 0x06, 0x12, 0x0e, 0x0a,
	0x0a, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x10, 0x07, 0x12, 0x0e, 0x0a,
	0x0a, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x32, 0x30, 0x30, 0x47, 0x10, 0x08, 0x12, 0x0e, 0x0a,
	0x0a, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x34, 0x30, 0x30, 0x47, 0x10, 0x09, 0x2a, 0x38, 0x0a,
	0x0a, 0x50, 0x6f, 0x72, 0x74, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x12, 0x0f, 0x0a, 0x0b, 0x48,
	0x41, 0x4c, 0x46, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x45, 0x58, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x45, 0x58, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x02, 0x2a, 0x69, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x46,
	0x50, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x46, 0x50, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x51, 0x53, 0x46, 0x50, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x51,
	0x53, 0x46, 0x50, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x53,
	0x46, 0x50, 0x32, 0x38, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x58, 0x46, 0x50, 0x10, 0x05, 0x12,
	0x07, 0x0a, 0x03, 0x43, 0x46, 0x50, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x42, 0x49, 0x43,
	0x10, 0x07, 0x2a, 0x50, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x4f, 0x4c, 0x54, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x50,
	0x4f, 0x57, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x55, 0x4d, 0x49, 0x44, 0x49,
	0x54, 0x59, 0x10, 0x04, 0x2a, 0xb1, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43,
	0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x55, 0x42, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x52, 0x49, 0x44,
	0x47, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x05, 0x12, 0x11,
	0x0a, 0x0d, 0x4c, 0x41, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10,
	0x06, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x07, 0x2a, 0x3f, 0x0a, 0x0a, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x52, 0x45, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x49, 0x50, 0x53, 0x45, 0x43, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x32,
	0x54, 0x50, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x58, 0x4c, 0x41, 0x4e, 0x10, 0x03, 0x12,
	0x08, 0x0a, 0x04, 0x4d, 0x50, 0x4c, 0x53, 0x10, 0x04, 0x2a, 0x52, 0x0a, 0x13, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x52, 0x49, 0x50, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x53, 0x50, 0x46, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x49, 0x47, 0x52, 0x50, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x47,
	0x50, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x53, 0x49, 0x53, 0x10, 0x05, 0x2a, 0x48, 0x0a,
	0x15, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x54, 0x50, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x52, 0x53, 0x54, 0x50, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x53, 0x54,
	0x50, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x56, 0x53, 0x54, 0x10, 0x03, 0x12, 0x08, 0x0a,
	0x04, 0x4c, 0x41, 0x43, 0x50, 0x10, 0x04, 0x2a, 0x48, 0x0a, 0x14, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x43, 0x4c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x52, 0x45,
	0x57, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x56, 0x50, 0x4e, 0x10, 0x02, 0x12,
	0x07, 0x0a, 0x03, 0x4e, 0x41, 0x54, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x41, 0x41, 0x10,
	0x04, 0x2a, 0x64, 0x0a, 0x0f, 0x51, 0x6f, 0x53, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x46, 0x46, 0x53, 0x45, 0x52, 0x56,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x54, 0x53, 0x45, 0x52, 0x56, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x50, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x10,
	0x03, 0x12, 0x14, 0x0a, 0x10, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x2a, 0x67, 0x0a, 0x16, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4e, 0x4d, 0x50, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x53,
	0x53, 0x48, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x45, 0x4c, 0x4e, 0x45, 0x54, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x54,
	0x54, 0x50, 0x53, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x45, 0x54, 0x43, 0x4f, 0x4e, 0x46,
	0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x54, 0x43, 0x4f, 0x4e, 0x46, 0x10, 0x06,
	0x2a, 0x89, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e,
	0x53, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x5f, 0x54, 0x4f, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x53,
	0x5f, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55,
	0x52, 0x45, 0x44, 0x5f, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x53, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x47, 0x48, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a,
	0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x53, 0x5f, 0x54, 0x4f, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a,
	0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x53, 0x5f, 0x54, 0x4f, 0x10, 0x06, 0x42, 0x2f, 0x0a, 0x13,
	0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x42, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x01, 0x5a, 0x07, 0x2e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_network_device_proto_rawDescOnce sync.Once
	file_network_device_proto_rawDescData = file_network_device_proto_rawDesc
)

func file_network_device_proto_rawDescGZIP() []byte {
	file_network_device_proto_rawDescOnce.Do(func() {
		file_network_device_proto_rawDescData = protoimpl.X.CompressGZIP(file_network_device_proto_rawDescData)
	})
	return file_network_device_proto_rawDescData
}

var file_network_device_proto_enumTypes = make([]protoimpl.EnumInfo, 17)
var file_network_device_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_network_device_proto_goTypes = []interface{}{
	(TreeNodeStatus)(0),         // 0: types.TreeNodeStatus
	(ChassisType)(0),            // 1: types.ChassisType
	(SlotType)(0),               // 2: types.SlotType
	(CardType)(0),               // 3: types.CardType
	(PortType)(0),               // 4: types.PortType
	(PortSpeed)(0),              // 5: types.PortSpeed
	(PortDuplex)(0),             // 6: types.PortDuplex
	(TransceiverType)(0),        // 7: types.TransceiverType
	(SensorType)(0),             // 8: types.SensorType
	(InterfaceType)(0),          // 9: types.InterfaceType
	(TunnelType)(0),             // 10: types.TunnelType
	(RoutingProtocolType)(0),    // 11: types.RoutingProtocolType
	(SwitchingProtocolType)(0),  // 12: types.SwitchingProtocolType
	(SecurityProtocolType)(0),   // 13: types.SecurityProtocolType
	(QoSProtocolType)(0),        // 14: types.QoSProtocolType
	(ManagementProtocolType)(0), // 15: types.ManagementProtocolType
	(RelationshipType)(0),       // 16: types.RelationshipType
	(*TreeNode)(nil),            // 17: types.TreeNode
	(*NetworkDeviceList)(nil),   // 18: types.NetworkDeviceList
	(*NetworkDevice)(nil),       // 19: types.NetworkDevice
	(*Location)(nil),            // 20: types.Location
	(*EquipmentInfo)(nil),       // 21: types.EquipmentInfo
	(*PhysicalLayer)(nil),       // 22: types.PhysicalLayer
	(*Chassis)(nil),             // 23: types.Chassis
	(*Slot)(nil),                // 24: types.Slot
	(*Card)(nil),                // 25: types.Card
	(*SubCard)(nil),             // 26: types.SubCard
	(*Port)(nil),                // 27: types.Port
	(*Transceiver)(nil),         // 28: types.Transceiver
	(*PowerSupply)(nil),         // 29: types.PowerSupply
	(*Fan)(nil),                 // 30: types.Fan
	(*Sensor)(nil),              // 31: types.Sensor
	(*LogicalLayer)(nil),        // 32: types.LogicalLayer
	(*LogicalInterface)(nil),    // 33: types.LogicalInterface
	(*VLAN)(nil),                // 34: types.VLAN
	(*VRF)(nil),                 // 35: types.VRF
	(*Bridge)(nil),              // 36: types.Bridge
	(*Tunnel)(nil),              // 37: types.Tunnel
	(*TechnologyLayer)(nil),     // 38: types.TechnologyLayer
	(*RoutingProtocol)(nil),     // 39: types.RoutingProtocol
	(*SwitchingProtocol)(nil),   // 40: types.SwitchingProtocol
	(*SecurityProtocol)(nil),    // 41: types.SecurityProtocol
	(*QoSProtocol)(nil),         // 42: types.QoSProtocol
	(*ManagementProtocol)(nil),  // 43: types.ManagementProtocol
	(*Relationship)(nil),        // 44: types.Relationship
	(*PortStatistics)(nil),      // 45: types.PortStatistics
	(*InterfaceStatistics)(nil), // 46: types.InterfaceStatistics
	nil,                         // 47: types.TreeNode.AttributesEntry
	nil,                         // 48: types.RoutingProtocol.ConfigurationEntry
	nil,                         // 49: types.SwitchingProtocol.ConfigurationEntry
	nil,                         // 50: types.SecurityProtocol.ConfigurationEntry
	nil,                         // 51: types.QoSProtocol.ConfigurationEntry
	nil,                         // 52: types.ManagementProtocol.ConfigurationEntry
	nil,                         // 53: types.Relationship.AttributesEntry
}
var file_network_device_proto_depIdxs = []int32{
	0,  // 0: types.TreeNode.status:type_name -> types.TreeNodeStatus
	47, // 1: types.TreeNode.attributes:type_name -> types.TreeNode.AttributesEntry
	17, // 2: types.TreeNode.children:type_name -> types.TreeNode
	17, // 3: types.TreeNode.parent:type_name -> types.TreeNode
	19, // 4: types.NetworkDeviceList.list:type_name -> types.NetworkDevice
	21, // 5: types.NetworkDevice.equipment_info:type_name -> types.EquipmentInfo
	22, // 6: types.NetworkDevice.physical_layer:type_name -> types.PhysicalLayer
	32, // 7: types.NetworkDevice.logical_layer:type_name -> types.LogicalLayer
	38, // 8: types.NetworkDevice.technology_layer:type_name -> types.TechnologyLayer
	17, // 9: types.NetworkDevice.device_tree:type_name -> types.TreeNode
	44, // 10: types.NetworkDevice.relationships:type_name -> types.Relationship
	20, // 11: types.EquipmentInfo.location:type_name -> types.Location
	17, // 12: types.PhysicalLayer.root:type_name -> types.TreeNode
	23, // 13: types.PhysicalLayer.chassis_list:type_name -> types.Chassis
	25, // 14: types.PhysicalLayer.card_list:type_name -> types.Card
	27, // 15: types.PhysicalLayer.port_list:type_name -> types.Port
	28, // 16: types.PhysicalLayer.transceiver_list:type_name -> types.Transceiver
	1,  // 17: types.Chassis.chassis_type:type_name -> types.ChassisType
	24, // 18: types.Chassis.slots:type_name -> types.Slot
	29, // 19: types.Chassis.power_supplies:type_name -> types.PowerSupply
	30, // 20: types.Chassis.fans:type_name -> types.Fan
	31, // 21: types.Chassis.sensors:type_name -> types.Sensor
	0,  // 22: types.Chassis.status:type_name -> types.TreeNodeStatus
	2,  // 23: types.Slot.slot_type:type_name -> types.SlotType
	25, // 24: types.Slot.installed_card:type_name -> types.Card
	0,  // 25: types.Slot.status:type_name -> types.TreeNodeStatus
	3,  // 26: types.Card.card_type:type_name -> types.CardType
	27, // 27: types.Card.ports:type_name -> types.Port
	26, // 28: types.Card.sub_cards:type_name -> types.SubCard
	0,  // 29: types.Card.status:type_name -> types.TreeNodeStatus
	27, // 30: types.SubCard.ports:type_name -> types.Port
	0,  // 31: types.SubCard.status:type_name -> types.TreeNodeStatus
	4,  // 32: types.Port.port_type:type_name -> types.PortType
	5,  // 33: types.Port.speed:type_name -> types.PortSpeed
	6,  // 34: types.Port.duplex:type_name -> types.PortDuplex
	28, // 35: types.Port.transceiver:type_name -> types.Transceiver
	33, // 36: types.Port.logical_interfaces:type_name -> types.LogicalInterface
	0,  // 37: types.Port.status:type_name -> types.TreeNodeStatus
	45, // 38: types.Port.statistics:type_name -> types.PortStatistics
	7,  // 39: types.Transceiver.transceiver_type:type_name -> types.TransceiverType
	0,  // 40: types.Transceiver.status:type_name -> types.TreeNodeStatus
	0,  // 41: types.PowerSupply.status:type_name -> types.TreeNodeStatus
	0,  // 42: types.Fan.status:type_name -> types.TreeNodeStatus
	8,  // 43: types.Sensor.sensor_type:type_name -> types.SensorType
	0,  // 44: types.Sensor.status:type_name -> types.TreeNodeStatus
	17, // 45: types.LogicalLayer.root:type_name -> types.TreeNode
	33, // 46: types.LogicalLayer.interface_list:type_name -> types.LogicalInterface
	34, // 47: types.LogicalLayer.vlan_list:type_name -> types.VLAN
	35, // 48: types.LogicalLayer.vrf_list:type_name -> types.VRF
	36, // 49: types.LogicalLayer.bridge_list:type_name -> types.Bridge
	37, // 50: types.LogicalLayer.tunnel_list:type_name -> types.Tunnel
	9,  // 51: types.LogicalInterface.interface_type:type_name -> types.InterfaceType
	34, // 52: types.LogicalInterface.vlans:type_name -> types.VLAN
	35, // 53: types.LogicalInterface.vrf:type_name -> types.VRF
	0,  // 54: types.LogicalInterface.status:type_name -> types.TreeNodeStatus
	46, // 55: types.LogicalInterface.statistics:type_name -> types.InterfaceStatistics
	33, // 56: types.VLAN.member_interfaces:type_name -> types.LogicalInterface
	0,  // 57: types.VLAN.status:type_name -> types.TreeNodeStatus
	33, // 58: types.VRF.member_interfaces:type_name -> types.LogicalInterface
	0,  // 59: types.VRF.status:type_name -> types.TreeNodeStatus
	33, // 60: types.Bridge.member_interfaces:type_name -> types.LogicalInterface
	0,  // 61: types.Bridge.status:type_name -> types.TreeNodeStatus
	10, // 62: types.Tunnel.tunnel_type:type_name -> types.TunnelType
	0,  // 63: types.Tunnel.status:type_name -> types.TreeNodeStatus
	17, // 64: types.TechnologyLayer.root:type_name -> types.TreeNode
	39, // 65: types.TechnologyLayer.routing_protocols:type_name -> types.RoutingProtocol
	40, // 66: types.TechnologyLayer.switching_protocols:type_name -> types.SwitchingProtocol
	41, // 67: types.TechnologyLayer.security_protocols:type_name -> types.SecurityProtocol
	42, // 68: types.TechnologyLayer.qos_protocols:type_name -> types.QoSProtocol
	43, // 69: types.TechnologyLayer.management_protocols:type_name -> types.ManagementProtocol
	11, // 70: types.RoutingProtocol.protocol_type:type_name -> types.RoutingProtocolType
	48, // 71: types.RoutingProtocol.configuration:type_name -> types.RoutingProtocol.ConfigurationEntry
	0,  // 72: types.RoutingProtocol.status:type_name -> types.TreeNodeStatus
	12, // 73: types.SwitchingProtocol.protocol_type:type_name -> types.SwitchingProtocolType
	49, // 74: types.SwitchingProtocol.configuration:type_name -> types.SwitchingProtocol.ConfigurationEntry
	0,  // 75: types.SwitchingProtocol.status:type_name -> types.TreeNodeStatus
	13, // 76: types.SecurityProtocol.protocol_type:type_name -> types.SecurityProtocolType
	50, // 77: types.SecurityProtocol.configuration:type_name -> types.SecurityProtocol.ConfigurationEntry
	0,  // 78: types.SecurityProtocol.status:type_name -> types.TreeNodeStatus
	14, // 79: types.QoSProtocol.protocol_type:type_name -> types.QoSProtocolType
	51, // 80: types.QoSProtocol.configuration:type_name -> types.QoSProtocol.ConfigurationEntry
	0,  // 81: types.QoSProtocol.status:type_name -> types.TreeNodeStatus
	15, // 82: types.ManagementProtocol.protocol_type:type_name -> types.ManagementProtocolType
	52, // 83: types.ManagementProtocol.configuration:type_name -> types.ManagementProtocol.ConfigurationEntry
	0,  // 84: types.ManagementProtocol.status:type_name -> types.TreeNodeStatus
	16, // 85: types.Relationship.relationship_type:type_name -> types.RelationshipType
	53, // 86: types.Relationship.attributes:type_name -> types.Relationship.AttributesEntry
	87, // [87:87] is the sub-list for method output_type
	87, // [87:87] is the sub-list for method input_type
	87, // [87:87] is the sub-list for extension type_name
	87, // [87:87] is the sub-list for extension extendee
	0,  // [0:87] is the sub-list for field type_name
}

func init() { file_network_device_proto_init() }
func file_network_device_proto_init() {
	if File_network_device_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_network_device_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_device_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkDeviceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_device_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_device_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_device_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipmentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_device_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhysicalLayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_device_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chassis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_device_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_device_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_device_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_device_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_device_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transceiver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_device_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerSupply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_device_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_device_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sensor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_device_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalLayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_device_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_device_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VLAN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_device_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VRF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_device_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bridge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_device_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tunnel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_device_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TechnologyLayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_device_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingProtocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_device_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchingProtocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_device_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityProtocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_device_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QoSProtocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_device_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagementProtocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_device_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Relationship); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_device_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_device_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_network_device_proto_rawDesc,
			NumEnums:      17,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_network_device_proto_goTypes,
		DependencyIndexes: file_network_device_proto_depIdxs,
		EnumInfos:         file_network_device_proto_enumTypes,
		MessageInfos:      file_network_device_proto_msgTypes,
	}.Build()
	File_network_device_proto = out.File
	file_network_device_proto_rawDesc = nil
	file_network_device_proto_goTypes = nil
	file_network_device_proto_depIdxs = nil
}
